//
// Generated by Bluespec Compiler (build e76ca21)
//
// On Thu Oct  1 10:41:28 CEST 2020
//
//
// Ports:
// Name                         I/O  size props
// s_AXI_Dmi_arready              O     1
// s_AXI_Dmi_rvalid               O     1
// s_AXI_Dmi_rid                  O    12
// s_AXI_Dmi_rdata                O    32
// s_AXI_Dmi_rresp                O     2
// s_AXI_Dmi_rlast                O     1
// s_AXI_Dmi_awready              O     1
// s_AXI_Dmi_wready               O     1
// s_AXI_Dmi_bvalid               O     1
// s_AXI_Dmi_bresp                O     2
// s_AXI_Dmi_bid                  O    12
// REQ_ADDRESS                    O     7 reg
// REQ_W_ADDRESS                  O     7 reg
// REQ_DATA                       O    32 reg
// REQ_VALID                      O     1 const
// REQ_OP                         O     2 reg
// REQ_ACCESS                     O     1 reg
// REQ_READ                       O     1 reg
// REQ_WRITE                      O     1 reg
// RSP_READY                      O     1 const
// slave_select                   O     5 const
// ACLK                           I     1 clock
// ARESETN                        I     1 reset
// s_AXI_Dmi_arvalid              I     1
// s_AXI_Dmi_arid                 I    12
// s_AXI_Dmi_araddr               I    32
// s_AXI_Dmi_arlen                I     8
// s_AXI_Dmi_arsize               I     3
// s_AXI_Dmi_arburst              I     2
// s_AXI_Dmi_arlock               I     1
// s_AXI_Dmi_arcache              I     4
// s_AXI_Dmi_arprot               I     3
// s_AXI_Dmi_arqos                I     4
// s_AXI_Dmi_arregion             I     4
// s_AXI_Dmi_rready               I     1
// s_AXI_Dmi_awvalid              I     1
// s_AXI_Dmi_awid                 I    12
// s_AXI_Dmi_awaddr               I    32
// s_AXI_Dmi_awlen                I     8
// s_AXI_Dmi_awsize               I     3
// s_AXI_Dmi_awburst              I     2
// s_AXI_Dmi_awlock               I     1
// s_AXI_Dmi_awcache              I     4
// s_AXI_Dmi_awprot               I     3
// s_AXI_Dmi_awqos                I     4
// s_AXI_Dmi_awregion             I     4
// s_AXI_Dmi_wvalid               I     1
// s_AXI_Dmi_wdata                I    32
// s_AXI_Dmi_wstrb                I     4
// s_AXI_Dmi_wlast                I     1
// s_AXI_Dmi_bready               I     1
// RSP_DATA                       I    32 reg
// RSP_OP                         I     2 reg
// RSP_VALID                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAXI_to_Dmi(ACLK,
		    ARESETN,

		    s_AXI_Dmi_arvalid,

		    s_AXI_Dmi_arready,

		    s_AXI_Dmi_arid,
		    s_AXI_Dmi_araddr,
		    s_AXI_Dmi_arlen,
		    s_AXI_Dmi_arsize,
		    s_AXI_Dmi_arburst,
		    s_AXI_Dmi_arlock,
		    s_AXI_Dmi_arcache,
		    s_AXI_Dmi_arprot,
		    s_AXI_Dmi_arqos,
		    s_AXI_Dmi_arregion,

		    s_AXI_Dmi_rready,

		    s_AXI_Dmi_rvalid,

		    s_AXI_Dmi_rid,

		    s_AXI_Dmi_rdata,

		    s_AXI_Dmi_rresp,

		    s_AXI_Dmi_rlast,

		    s_AXI_Dmi_awready,

		    s_AXI_Dmi_awvalid,

		    s_AXI_Dmi_awid,
		    s_AXI_Dmi_awaddr,
		    s_AXI_Dmi_awlen,
		    s_AXI_Dmi_awsize,
		    s_AXI_Dmi_awburst,
		    s_AXI_Dmi_awlock,
		    s_AXI_Dmi_awcache,
		    s_AXI_Dmi_awprot,
		    s_AXI_Dmi_awqos,
		    s_AXI_Dmi_awregion,

		    s_AXI_Dmi_wready,

		    s_AXI_Dmi_wvalid,

		    s_AXI_Dmi_wdata,
		    s_AXI_Dmi_wstrb,
		    s_AXI_Dmi_wlast,

		    s_AXI_Dmi_bready,

		    s_AXI_Dmi_bvalid,

		    s_AXI_Dmi_bresp,

		    s_AXI_Dmi_bid,

		    REQ_ADDRESS,

		    REQ_W_ADDRESS,

		    REQ_DATA,
		    REQ_VALID,

		    REQ_OP,

		    REQ_ACCESS,

		    REQ_READ,

		    REQ_WRITE,

		    RSP_DATA,
		    RSP_OP,
		    RSP_VALID,
		    RSP_READY,

		    slave_select);
  input  ACLK;
  input  ARESETN;

  // action method s_AXI_Dmi_s_read_fab_parvalid
  input  s_AXI_Dmi_arvalid;

  // value method s_AXI_Dmi_s_read_fab_arready
  output s_AXI_Dmi_arready;

  // action method s_AXI_Dmi_s_read_fab_parchannel
  input  [11 : 0] s_AXI_Dmi_arid;
  input  [31 : 0] s_AXI_Dmi_araddr;
  input  [7 : 0] s_AXI_Dmi_arlen;
  input  [2 : 0] s_AXI_Dmi_arsize;
  input  [1 : 0] s_AXI_Dmi_arburst;
  input  s_AXI_Dmi_arlock;
  input  [3 : 0] s_AXI_Dmi_arcache;
  input  [2 : 0] s_AXI_Dmi_arprot;
  input  [3 : 0] s_AXI_Dmi_arqos;
  input  [3 : 0] s_AXI_Dmi_arregion;

  // action method s_AXI_Dmi_s_read_fab_prready
  input  s_AXI_Dmi_rready;

  // value method s_AXI_Dmi_s_read_fab_rvalid
  output s_AXI_Dmi_rvalid;

  // value method s_AXI_Dmi_s_read_fab_rid
  output [11 : 0] s_AXI_Dmi_rid;

  // value method s_AXI_Dmi_s_read_fab_rdata
  output [31 : 0] s_AXI_Dmi_rdata;

  // value method s_AXI_Dmi_s_read_fab_rresp
  output [1 : 0] s_AXI_Dmi_rresp;

  // value method s_AXI_Dmi_s_read_fab_rlast
  output s_AXI_Dmi_rlast;

  // value method s_AXI_Dmi_s_read_fab_ruser

  // value method s_AXI_Dmi_s_write_fab_awready
  output s_AXI_Dmi_awready;

  // action method s_AXI_Dmi_s_write_fab_pawvalid
  input  s_AXI_Dmi_awvalid;

  // action method s_AXI_Dmi_s_write_fab_pawchannel
  input  [11 : 0] s_AXI_Dmi_awid;
  input  [31 : 0] s_AXI_Dmi_awaddr;
  input  [7 : 0] s_AXI_Dmi_awlen;
  input  [2 : 0] s_AXI_Dmi_awsize;
  input  [1 : 0] s_AXI_Dmi_awburst;
  input  s_AXI_Dmi_awlock;
  input  [3 : 0] s_AXI_Dmi_awcache;
  input  [2 : 0] s_AXI_Dmi_awprot;
  input  [3 : 0] s_AXI_Dmi_awqos;
  input  [3 : 0] s_AXI_Dmi_awregion;

  // value method s_AXI_Dmi_s_write_fab_wready
  output s_AXI_Dmi_wready;

  // action method s_AXI_Dmi_s_write_fab_pwvalid
  input  s_AXI_Dmi_wvalid;

  // action method s_AXI_Dmi_s_write_fab_pwchannel
  input  [31 : 0] s_AXI_Dmi_wdata;
  input  [3 : 0] s_AXI_Dmi_wstrb;
  input  s_AXI_Dmi_wlast;

  // action method s_AXI_Dmi_s_write_fab_pbready
  input  s_AXI_Dmi_bready;

  // value method s_AXI_Dmi_s_write_fab_bvalid
  output s_AXI_Dmi_bvalid;

  // value method s_AXI_Dmi_s_write_fab_bresp
  output [1 : 0] s_AXI_Dmi_bresp;

  // value method s_AXI_Dmi_s_write_fab_bid
  output [11 : 0] s_AXI_Dmi_bid;

  // value method s_AXI_Dmi_s_write_fab_buser

  // value method dmi_master_req_address
  output [6 : 0] REQ_ADDRESS;

  // value method dmi_master_req_w_address
  output [6 : 0] REQ_W_ADDRESS;

  // value method dmi_master_req_data
  output [31 : 0] REQ_DATA;
  output REQ_VALID;

  // value method dmi_master_req_op
  output [1 : 0] REQ_OP;

  // value method dmi_master_req_access
  output REQ_ACCESS;

  // value method dmi_master_req_read
  output REQ_READ;

  // value method dmi_master_req_write
  output REQ_WRITE;

  // action method dmi_master_rsp_action
  input  [31 : 0] RSP_DATA;
  input  [1 : 0] RSP_OP;
  input  RSP_VALID;
  output RSP_READY;

  // value method slave_select
  output [4 : 0] slave_select;

  // signals for module outputs
  wire [31 : 0] REQ_DATA, s_AXI_Dmi_rdata;
  wire [11 : 0] s_AXI_Dmi_bid, s_AXI_Dmi_rid;
  wire [6 : 0] REQ_ADDRESS, REQ_W_ADDRESS;
  wire [4 : 0] slave_select;
  wire [1 : 0] REQ_OP, s_AXI_Dmi_bresp, s_AXI_Dmi_rresp;
  wire REQ_ACCESS,
       REQ_READ,
       REQ_VALID,
       REQ_WRITE,
       RSP_READY,
       s_AXI_Dmi_arready,
       s_AXI_Dmi_awready,
       s_AXI_Dmi_bvalid,
       s_AXI_Dmi_rlast,
       s_AXI_Dmi_rvalid,
       s_AXI_Dmi_wready;

  // inlined wires
  wire [73 : 0] axi_to_dmi_internal_s_read_in_rv$port1__read,
		axi_to_dmi_internal_s_read_in_rv$port1__write_1,
		axi_to_dmi_internal_s_read_in_rv$port2__read,
		axi_to_dmi_internal_s_write_in_addr_rv$port1__read,
		axi_to_dmi_internal_s_write_in_addr_rv$port1__write_1,
		axi_to_dmi_internal_s_write_in_addr_rv$port2__read;
  wire [72 : 0] axi_to_dmi_internal_s_read_arinpkg$wget,
		axi_to_dmi_internal_s_write_arinpkg_addr$wget;
  wire [47 : 0] axi_to_dmi_internal_s_read_out_rv$port1__read,
		axi_to_dmi_internal_s_read_out_rv$port1__write_1,
		axi_to_dmi_internal_s_read_out_rv$port2__read;
  wire [37 : 0] axi_to_dmi_internal_s_write_in_data_rv$port1__read,
		axi_to_dmi_internal_s_write_in_data_rv$port1__write_1,
		axi_to_dmi_internal_s_write_in_data_rv$port2__read;
  wire [36 : 0] axi_to_dmi_internal_s_write_arinpkg_data$wget;
  wire [14 : 0] axi_to_dmi_internal_s_write_out_rv$port1__read,
		axi_to_dmi_internal_s_write_out_rv$port1__write_1,
		axi_to_dmi_internal_s_write_out_rv$port2__read;
  wire axi_to_dmi_internal_s_read_in_rv$EN_port1__write,
       axi_to_dmi_internal_s_read_out_rv$EN_port0__write,
       axi_to_dmi_internal_s_read_out_rv$EN_port1__write,
       axi_to_dmi_internal_s_write_in_addr_rv$EN_port1__write,
       axi_to_dmi_internal_s_write_in_data_rv$EN_port1__write,
       axi_to_dmi_internal_s_write_out_rv$EN_port0__write,
       axi_to_dmi_internal_s_write_out_rv$EN_port1__write;

  // register axi_to_dmi_access_type
  reg axi_to_dmi_access_type;
  wire axi_to_dmi_access_type$D_IN, axi_to_dmi_access_type$EN;

  // register axi_to_dmi_address
  reg [31 : 0] axi_to_dmi_address;
  wire [31 : 0] axi_to_dmi_address$D_IN;
  wire axi_to_dmi_address$EN;

  // register axi_to_dmi_address_pcie
  reg [31 : 0] axi_to_dmi_address_pcie;
  wire [31 : 0] axi_to_dmi_address_pcie$D_IN;
  wire axi_to_dmi_address_pcie$EN;

  // register axi_to_dmi_data
  reg [31 : 0] axi_to_dmi_data;
  wire [31 : 0] axi_to_dmi_data$D_IN;
  wire axi_to_dmi_data$EN;

  // register axi_to_dmi_data_pcie
  reg [31 : 0] axi_to_dmi_data_pcie;
  wire [31 : 0] axi_to_dmi_data_pcie$D_IN;
  wire axi_to_dmi_data_pcie$EN;

  // register axi_to_dmi_dmi_handler_dmi_busy
  reg axi_to_dmi_dmi_handler_dmi_busy;
  wire axi_to_dmi_dmi_handler_dmi_busy$D_IN,
       axi_to_dmi_dmi_handler_dmi_busy$EN;

  // register axi_to_dmi_dmi_handler_internal_req_access
  reg axi_to_dmi_dmi_handler_internal_req_access;
  wire axi_to_dmi_dmi_handler_internal_req_access$D_IN,
       axi_to_dmi_dmi_handler_internal_req_access$EN;

  // register axi_to_dmi_dmi_handler_internal_req_address
  reg [6 : 0] axi_to_dmi_dmi_handler_internal_req_address;
  wire [6 : 0] axi_to_dmi_dmi_handler_internal_req_address$D_IN;
  wire axi_to_dmi_dmi_handler_internal_req_address$EN;

  // register axi_to_dmi_dmi_handler_internal_req_data
  reg [31 : 0] axi_to_dmi_dmi_handler_internal_req_data;
  wire [31 : 0] axi_to_dmi_dmi_handler_internal_req_data$D_IN;
  wire axi_to_dmi_dmi_handler_internal_req_data$EN;

  // register axi_to_dmi_dmi_handler_internal_req_op
  reg [1 : 0] axi_to_dmi_dmi_handler_internal_req_op;
  wire [1 : 0] axi_to_dmi_dmi_handler_internal_req_op$D_IN;
  wire axi_to_dmi_dmi_handler_internal_req_op$EN;

  // register axi_to_dmi_dmi_handler_internal_rsp_data
  reg [31 : 0] axi_to_dmi_dmi_handler_internal_rsp_data;
  wire [31 : 0] axi_to_dmi_dmi_handler_internal_rsp_data$D_IN;
  wire axi_to_dmi_dmi_handler_internal_rsp_data$EN;

  // register axi_to_dmi_dmi_handler_internal_rsp_op
  reg [1 : 0] axi_to_dmi_dmi_handler_internal_rsp_op;
  wire [1 : 0] axi_to_dmi_dmi_handler_internal_rsp_op$D_IN;
  wire axi_to_dmi_dmi_handler_internal_rsp_op$EN;

  // register axi_to_dmi_dmi_handler_latency
  reg [3 : 0] axi_to_dmi_dmi_handler_latency;
  wire [3 : 0] axi_to_dmi_dmi_handler_latency$D_IN;
  wire axi_to_dmi_dmi_handler_latency$EN;

  // register axi_to_dmi_internal_s_read_in_rv
  reg [73 : 0] axi_to_dmi_internal_s_read_in_rv;
  wire [73 : 0] axi_to_dmi_internal_s_read_in_rv$D_IN;
  wire axi_to_dmi_internal_s_read_in_rv$EN;

  // register axi_to_dmi_internal_s_read_isRst_isInReset
  reg axi_to_dmi_internal_s_read_isRst_isInReset;
  wire axi_to_dmi_internal_s_read_isRst_isInReset$D_IN,
       axi_to_dmi_internal_s_read_isRst_isInReset$EN;

  // register axi_to_dmi_internal_s_read_out_rv
  reg [47 : 0] axi_to_dmi_internal_s_read_out_rv;
  wire [47 : 0] axi_to_dmi_internal_s_read_out_rv$D_IN;
  wire axi_to_dmi_internal_s_read_out_rv$EN;

  // register axi_to_dmi_internal_s_write_in_addr_rv
  reg [73 : 0] axi_to_dmi_internal_s_write_in_addr_rv;
  wire [73 : 0] axi_to_dmi_internal_s_write_in_addr_rv$D_IN;
  wire axi_to_dmi_internal_s_write_in_addr_rv$EN;

  // register axi_to_dmi_internal_s_write_in_data_rv
  reg [37 : 0] axi_to_dmi_internal_s_write_in_data_rv;
  wire [37 : 0] axi_to_dmi_internal_s_write_in_data_rv$D_IN;
  wire axi_to_dmi_internal_s_write_in_data_rv$EN;

  // register axi_to_dmi_internal_s_write_isRst_isInReset
  reg axi_to_dmi_internal_s_write_isRst_isInReset;
  wire axi_to_dmi_internal_s_write_isRst_isInReset$D_IN,
       axi_to_dmi_internal_s_write_isRst_isInReset$EN;

  // register axi_to_dmi_internal_s_write_out_rv
  reg [14 : 0] axi_to_dmi_internal_s_write_out_rv;
  wire [14 : 0] axi_to_dmi_internal_s_write_out_rv$D_IN;
  wire axi_to_dmi_internal_s_write_out_rv$EN;

  // register axi_to_dmi_read_id
  reg [11 : 0] axi_to_dmi_read_id;
  wire [11 : 0] axi_to_dmi_read_id$D_IN;
  wire axi_to_dmi_read_id$EN;

  // register axi_to_dmi_received_addr
  reg axi_to_dmi_received_addr;
  wire axi_to_dmi_received_addr$D_IN, axi_to_dmi_received_addr$EN;

  // register axi_to_dmi_received_data
  reg axi_to_dmi_received_data;
  wire axi_to_dmi_received_data$D_IN, axi_to_dmi_received_data$EN;

  // register axi_to_dmi_strb
  reg [3 : 0] axi_to_dmi_strb;
  wire [3 : 0] axi_to_dmi_strb$D_IN;
  wire axi_to_dmi_strb$EN;

  // register axi_to_dmi_write_counter
  reg [4 : 0] axi_to_dmi_write_counter;
  reg [4 : 0] axi_to_dmi_write_counter$D_IN;
  wire axi_to_dmi_write_counter$EN;

  // register axi_to_dmi_write_id
  reg [11 : 0] axi_to_dmi_write_id;
  wire [11 : 0] axi_to_dmi_write_id$D_IN;
  wire axi_to_dmi_write_id$EN;

  // ports of submodule axi_to_dmi_dmi_handler_dmi_request
  wire [39 : 0] axi_to_dmi_dmi_handler_dmi_request$D_IN,
		axi_to_dmi_dmi_handler_dmi_request$D_OUT;
  wire axi_to_dmi_dmi_handler_dmi_request$CLR,
       axi_to_dmi_dmi_handler_dmi_request$DEQ,
       axi_to_dmi_dmi_handler_dmi_request$EMPTY_N,
       axi_to_dmi_dmi_handler_dmi_request$ENQ,
       axi_to_dmi_dmi_handler_dmi_request$FULL_N;

  // ports of submodule axi_to_dmi_dmi_handler_dmi_response
  wire [33 : 0] axi_to_dmi_dmi_handler_dmi_response$D_IN,
		axi_to_dmi_dmi_handler_dmi_response$D_OUT;
  wire axi_to_dmi_dmi_handler_dmi_response$CLR,
       axi_to_dmi_dmi_handler_dmi_response$DEQ,
       axi_to_dmi_dmi_handler_dmi_response$EMPTY_N,
       axi_to_dmi_dmi_handler_dmi_response$ENQ,
       axi_to_dmi_dmi_handler_dmi_response$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_latency,
       WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request,
       WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_response,
       WILL_FIRE_RL_axi_to_dmi_receive_read_req,
       WILL_FIRE_RL_axi_to_dmi_send_axi_rsp,
       WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1;
  wire [39 : 0] MUX_axi_to_dmi_dmi_handler_dmi_request$enq_1__VAL_1,
		MUX_axi_to_dmi_dmi_handler_dmi_request$enq_1__VAL_2;
  wire [33 : 0] MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_2;
  wire [14 : 0] MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__VAL_1;
  wire [3 : 0] MUX_axi_to_dmi_dmi_handler_latency$write_1__VAL_2;
  wire [1 : 0] MUX_axi_to_dmi_dmi_handler_internal_req_op$write_1__VAL_1;
  wire MUX_axi_to_dmi_access_type$write_1__SEL_1,
       MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1,
       MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__SEL_1,
       MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__SEL_1,
       MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__SEL_2,
       MUX_axi_to_dmi_received_addr$write_1__SEL_2,
       MUX_axi_to_dmi_received_data$write_1__SEL_2;

  // remaining internal signals
  reg [3 : 0] CASE_axi_to_dmi_internal_s_read_arinpkgwget_B_ETC__q3,
	      CASE_axi_to_dmi_internal_s_write_arinpkg_addr_ETC__q4,
	      CASE_s_AXI_Dmi_arcache_0_s_AXI_Dmi_arcache_1_s_ETC__q1,
	      CASE_s_AXI_Dmi_awcache_0_s_AXI_Dmi_awcache_1_s_ETC__q2;
  wire [31 : 0] x_dmi_data__h5498;
  wire [14 : 0] IF_s_AXI_Dmi_arcache_EQ_0_82_OR_s_AXI_Dmi_arca_ETC___d197,
		IF_s_AXI_Dmi_awcache_EQ_0_10_OR_s_AXI_Dmi_awca_ETC___d225;
  wire [4 : 0] x__h5723;

  // value method s_AXI_Dmi_s_read_fab_arready
  assign s_AXI_Dmi_arready =
	     !axi_to_dmi_internal_s_read_isRst_isInReset &&
	     !axi_to_dmi_internal_s_read_in_rv$port1__read[73] ;

  // value method s_AXI_Dmi_s_read_fab_rvalid
  assign s_AXI_Dmi_rvalid =
	     !axi_to_dmi_internal_s_read_isRst_isInReset &&
	     axi_to_dmi_internal_s_read_out_rv[47] ;

  // value method s_AXI_Dmi_s_read_fab_rid
  assign s_AXI_Dmi_rid =
	     axi_to_dmi_internal_s_read_out_rv[47] ?
	       axi_to_dmi_internal_s_read_out_rv[46:35] :
	       12'd0 ;

  // value method s_AXI_Dmi_s_read_fab_rdata
  assign s_AXI_Dmi_rdata =
	     axi_to_dmi_internal_s_read_out_rv[47] ?
	       axi_to_dmi_internal_s_read_out_rv[34:3] :
	       32'd0 ;

  // value method s_AXI_Dmi_s_read_fab_rresp
  assign s_AXI_Dmi_rresp =
	     axi_to_dmi_internal_s_read_out_rv[47] ?
	       axi_to_dmi_internal_s_read_out_rv[2:1] :
	       2'd0 ;

  // value method s_AXI_Dmi_s_read_fab_rlast
  assign s_AXI_Dmi_rlast =
	     axi_to_dmi_internal_s_read_out_rv[47] &&
	     axi_to_dmi_internal_s_read_out_rv[0] ;

  // value method s_AXI_Dmi_s_write_fab_awready
  assign s_AXI_Dmi_awready =
	     !axi_to_dmi_internal_s_write_isRst_isInReset &&
	     !axi_to_dmi_internal_s_write_in_addr_rv$port1__read[73] ;

  // value method s_AXI_Dmi_s_write_fab_wready
  assign s_AXI_Dmi_wready =
	     !axi_to_dmi_internal_s_write_isRst_isInReset &&
	     !axi_to_dmi_internal_s_write_in_data_rv$port1__read[37] ;

  // value method s_AXI_Dmi_s_write_fab_bvalid
  assign s_AXI_Dmi_bvalid =
	     !axi_to_dmi_internal_s_write_isRst_isInReset &&
	     axi_to_dmi_internal_s_write_out_rv[14] ;

  // value method s_AXI_Dmi_s_write_fab_bresp
  assign s_AXI_Dmi_bresp =
	     axi_to_dmi_internal_s_write_out_rv[14] ?
	       axi_to_dmi_internal_s_write_out_rv[1:0] :
	       2'd0 ;

  // value method s_AXI_Dmi_s_write_fab_bid
  assign s_AXI_Dmi_bid =
	     axi_to_dmi_internal_s_write_out_rv[14] ?
	       axi_to_dmi_internal_s_write_out_rv[13:2] :
	       12'd0 ;

  // value method dmi_master_req_address
  assign REQ_ADDRESS = axi_to_dmi_dmi_handler_internal_req_address ;

  // value method dmi_master_req_w_address
  assign REQ_W_ADDRESS = axi_to_dmi_dmi_handler_internal_req_address ;

  // value method dmi_master_req_data
  assign REQ_DATA = axi_to_dmi_dmi_handler_internal_req_data ;
  assign REQ_VALID = 1'd1 ;

  // value method dmi_master_req_op
  assign REQ_OP = axi_to_dmi_dmi_handler_internal_req_op ;

  // value method dmi_master_req_access
  assign REQ_ACCESS = axi_to_dmi_dmi_handler_internal_req_access ;

  // value method dmi_master_req_read
  assign REQ_READ = axi_to_dmi_dmi_handler_internal_req_op[0] ;

  // value method dmi_master_req_write
  assign REQ_WRITE = axi_to_dmi_dmi_handler_internal_req_op[1] ;

  // action method dmi_master_rsp_action
  assign RSP_READY = 1'd1 ;

  // value method slave_select
  assign slave_select = 5'h0A ;

  // submodule axi_to_dmi_dmi_handler_dmi_request
  FIFO2 #(.width(32'd40),
	  .guarded(32'd1)) axi_to_dmi_dmi_handler_dmi_request(.RST(ARESETN),
							      .CLK(ACLK),
							      .D_IN(axi_to_dmi_dmi_handler_dmi_request$D_IN),
							      .ENQ(axi_to_dmi_dmi_handler_dmi_request$ENQ),
							      .DEQ(axi_to_dmi_dmi_handler_dmi_request$DEQ),
							      .CLR(axi_to_dmi_dmi_handler_dmi_request$CLR),
							      .D_OUT(axi_to_dmi_dmi_handler_dmi_request$D_OUT),
							      .FULL_N(axi_to_dmi_dmi_handler_dmi_request$FULL_N),
							      .EMPTY_N(axi_to_dmi_dmi_handler_dmi_request$EMPTY_N));

  // submodule axi_to_dmi_dmi_handler_dmi_response
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) axi_to_dmi_dmi_handler_dmi_response(.RST(ARESETN),
							       .CLK(ACLK),
							       .D_IN(axi_to_dmi_dmi_handler_dmi_response$D_IN),
							       .ENQ(axi_to_dmi_dmi_handler_dmi_response$ENQ),
							       .DEQ(axi_to_dmi_dmi_handler_dmi_response$DEQ),
							       .CLR(axi_to_dmi_dmi_handler_dmi_response$CLR),
							       .D_OUT(axi_to_dmi_dmi_handler_dmi_response$D_OUT),
							       .FULL_N(axi_to_dmi_dmi_handler_dmi_response$FULL_N),
							       .EMPTY_N(axi_to_dmi_dmi_handler_dmi_response$EMPTY_N));

  // rule RL_axi_to_dmi_send_dmi_write_request
  assign WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request =
	     axi_to_dmi_dmi_handler_dmi_request$FULL_N &&
	     !axi_to_dmi_internal_s_write_out_rv$port1__read[14] &&
	     axi_to_dmi_received_addr &&
	     axi_to_dmi_received_data &&
	     !WILL_FIRE_RL_axi_to_dmi_send_axi_rsp &&
	     !WILL_FIRE_RL_axi_to_dmi_receive_read_req ;

  // rule RL_axi_to_dmi_send_axi_rsp
  assign WILL_FIRE_RL_axi_to_dmi_send_axi_rsp =
	     axi_to_dmi_dmi_handler_dmi_response$EMPTY_N &&
	     !axi_to_dmi_internal_s_write_out_rv$port1__read[14] &&
	     !axi_to_dmi_internal_s_read_out_rv$port1__read[47] ;

  // rule RL_axi_to_dmi_receive_read_req
  assign WILL_FIRE_RL_axi_to_dmi_receive_read_req =
	     axi_to_dmi_internal_s_read_in_rv[73] &&
	     axi_to_dmi_dmi_handler_dmi_request$FULL_N ;

  // rule RL_axi_to_dmi_dmi_handler_handle_request
  assign WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request =
	     axi_to_dmi_dmi_handler_dmi_request$EMPTY_N &&
	     axi_to_dmi_dmi_handler_dmi_response$FULL_N &&
	     !axi_to_dmi_dmi_handler_dmi_busy ;

  // rule RL_axi_to_dmi_dmi_handler_handle_latency
  assign WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_latency =
	     axi_to_dmi_dmi_handler_dmi_busy &&
	     axi_to_dmi_dmi_handler_latency != 4'd0 ;

  // rule RL_axi_to_dmi_dmi_handler_handle_response
  assign WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_response =
	     axi_to_dmi_dmi_handler_dmi_response$FULL_N &&
	     axi_to_dmi_dmi_handler_dmi_busy &&
	     axi_to_dmi_dmi_handler_latency == 4'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_axi_to_dmi_access_type$write_1__SEL_1 =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     (axi_to_dmi_strb == 4'hF || axi_to_dmi_write_counter == 5'd3) ;
  assign MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1 =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] == 7'd12 ;
  assign MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__SEL_1 =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] != 7'd12 ;
  assign MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_axi_to_dmi_send_axi_rsp && axi_to_dmi_access_type ;
  assign MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__SEL_2 =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     axi_to_dmi_strb != 4'hF &&
	     axi_to_dmi_write_counter != 5'd3 ;
  assign MUX_axi_to_dmi_received_addr$write_1__SEL_2 =
	     axi_to_dmi_internal_s_write_in_addr_rv[73] &&
	     !axi_to_dmi_received_addr ;
  assign MUX_axi_to_dmi_received_data$write_1__SEL_2 =
	     axi_to_dmi_internal_s_write_in_data_rv[37] &&
	     !axi_to_dmi_received_data ;
  assign MUX_axi_to_dmi_dmi_handler_dmi_request$enq_1__VAL_1 =
	     { (axi_to_dmi_strb == 4'hF) ?
		 axi_to_dmi_address[6:0] :
		 axi_to_dmi_address_pcie[6:0],
	       (axi_to_dmi_strb == 4'hF) ?
		 axi_to_dmi_data :
		 x_dmi_data__h5498,
	       1'd1 } ;
  assign MUX_axi_to_dmi_dmi_handler_dmi_request$enq_1__VAL_2 =
	     { axi_to_dmi_internal_s_read_in_rv[35:29], 33'd0 } ;
  always@(axi_to_dmi_dmi_handler_dmi_request$D_OUT)
  begin
    case (axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33])
      7'd0: MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1 = 34'd204100;
      7'd4: MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1 = 34'd13572;
      7'd8: MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1 = 34'd220464;
      7'd16:
	  MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1 = 34'd178004;
      default: MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1 =
		   34'h37AB6FBBC;
    endcase
  end
  assign MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_2 =
	     { axi_to_dmi_dmi_handler_internal_rsp_data, 2'd0 } ;
  assign MUX_axi_to_dmi_dmi_handler_internal_req_op$write_1__VAL_1 =
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[0] ? 2'b10 : 2'b01 ;
  assign MUX_axi_to_dmi_dmi_handler_latency$write_1__VAL_2 =
	     axi_to_dmi_dmi_handler_latency - 4'd1 ;
  assign MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__VAL_1 =
	     { 1'd1, axi_to_dmi_write_id, 2'd0 } ;

  // inlined wires
  assign axi_to_dmi_internal_s_read_arinpkg$wget =
	     { s_AXI_Dmi_arid,
	       s_AXI_Dmi_araddr,
	       s_AXI_Dmi_arlen,
	       s_AXI_Dmi_arsize,
	       s_AXI_Dmi_arburst,
	       s_AXI_Dmi_arlock,
	       IF_s_AXI_Dmi_arcache_EQ_0_82_OR_s_AXI_Dmi_arca_ETC___d197 } ;
  assign axi_to_dmi_internal_s_write_arinpkg_addr$wget =
	     { s_AXI_Dmi_awid,
	       s_AXI_Dmi_awaddr,
	       s_AXI_Dmi_awlen,
	       s_AXI_Dmi_awsize,
	       s_AXI_Dmi_awburst,
	       s_AXI_Dmi_awlock,
	       IF_s_AXI_Dmi_awcache_EQ_0_10_OR_s_AXI_Dmi_awca_ETC___d225 } ;
  assign axi_to_dmi_internal_s_write_arinpkg_data$wget =
	     { s_AXI_Dmi_wdata, s_AXI_Dmi_wstrb, s_AXI_Dmi_wlast } ;
  assign axi_to_dmi_internal_s_read_in_rv$port1__read =
	     WILL_FIRE_RL_axi_to_dmi_receive_read_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi_to_dmi_internal_s_read_in_rv ;
  assign axi_to_dmi_internal_s_read_in_rv$EN_port1__write =
	     !axi_to_dmi_internal_s_read_in_rv$port1__read[73] &&
	     !axi_to_dmi_internal_s_read_isRst_isInReset &&
	     s_AXI_Dmi_arvalid ;
  assign axi_to_dmi_internal_s_read_in_rv$port1__write_1 =
	     { 1'd1,
	       axi_to_dmi_internal_s_read_arinpkg$wget[72:15],
	       CASE_axi_to_dmi_internal_s_read_arinpkgwget_B_ETC__q3,
	       axi_to_dmi_internal_s_read_arinpkg$wget[10:0] } ;
  assign axi_to_dmi_internal_s_read_in_rv$port2__read =
	     axi_to_dmi_internal_s_read_in_rv$EN_port1__write ?
	       axi_to_dmi_internal_s_read_in_rv$port1__write_1 :
	       axi_to_dmi_internal_s_read_in_rv$port1__read ;
  assign axi_to_dmi_internal_s_read_out_rv$EN_port0__write =
	     axi_to_dmi_internal_s_read_out_rv[47] &&
	     !axi_to_dmi_internal_s_read_isRst_isInReset &&
	     s_AXI_Dmi_rready ;
  assign axi_to_dmi_internal_s_read_out_rv$port1__read =
	     axi_to_dmi_internal_s_read_out_rv$EN_port0__write ?
	       48'h2AAAAAAAAAAA :
	       axi_to_dmi_internal_s_read_out_rv ;
  assign axi_to_dmi_internal_s_read_out_rv$EN_port1__write =
	     WILL_FIRE_RL_axi_to_dmi_send_axi_rsp && !axi_to_dmi_access_type ;
  assign axi_to_dmi_internal_s_read_out_rv$port1__write_1 =
	     { 1'd1,
	       axi_to_dmi_read_id,
	       axi_to_dmi_dmi_handler_dmi_response$D_OUT[33:2],
	       3'd1 } ;
  assign axi_to_dmi_internal_s_read_out_rv$port2__read =
	     axi_to_dmi_internal_s_read_out_rv$EN_port1__write ?
	       axi_to_dmi_internal_s_read_out_rv$port1__write_1 :
	       axi_to_dmi_internal_s_read_out_rv$port1__read ;
  assign axi_to_dmi_internal_s_write_in_addr_rv$port1__read =
	     MUX_axi_to_dmi_received_addr$write_1__SEL_2 ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       axi_to_dmi_internal_s_write_in_addr_rv ;
  assign axi_to_dmi_internal_s_write_in_addr_rv$EN_port1__write =
	     !axi_to_dmi_internal_s_write_in_addr_rv$port1__read[73] &&
	     !axi_to_dmi_internal_s_write_isRst_isInReset &&
	     s_AXI_Dmi_awvalid ;
  assign axi_to_dmi_internal_s_write_in_addr_rv$port1__write_1 =
	     { 1'd1,
	       axi_to_dmi_internal_s_write_arinpkg_addr$wget[72:15],
	       CASE_axi_to_dmi_internal_s_write_arinpkg_addr_ETC__q4,
	       axi_to_dmi_internal_s_write_arinpkg_addr$wget[10:0] } ;
  assign axi_to_dmi_internal_s_write_in_addr_rv$port2__read =
	     axi_to_dmi_internal_s_write_in_addr_rv$EN_port1__write ?
	       axi_to_dmi_internal_s_write_in_addr_rv$port1__write_1 :
	       axi_to_dmi_internal_s_write_in_addr_rv$port1__read ;
  assign axi_to_dmi_internal_s_write_in_data_rv$port1__read =
	     MUX_axi_to_dmi_received_data$write_1__SEL_2 ?
	       38'h0AAAAAAAAA :
	       axi_to_dmi_internal_s_write_in_data_rv ;
  assign axi_to_dmi_internal_s_write_in_data_rv$EN_port1__write =
	     !axi_to_dmi_internal_s_write_in_data_rv$port1__read[37] &&
	     !axi_to_dmi_internal_s_write_isRst_isInReset &&
	     s_AXI_Dmi_wvalid ;
  assign axi_to_dmi_internal_s_write_in_data_rv$port1__write_1 =
	     { 1'd1, axi_to_dmi_internal_s_write_arinpkg_data$wget } ;
  assign axi_to_dmi_internal_s_write_in_data_rv$port2__read =
	     axi_to_dmi_internal_s_write_in_data_rv$EN_port1__write ?
	       axi_to_dmi_internal_s_write_in_data_rv$port1__write_1 :
	       axi_to_dmi_internal_s_write_in_data_rv$port1__read ;
  assign axi_to_dmi_internal_s_write_out_rv$EN_port0__write =
	     axi_to_dmi_internal_s_write_out_rv[14] &&
	     !axi_to_dmi_internal_s_write_isRst_isInReset &&
	     s_AXI_Dmi_bready ;
  assign axi_to_dmi_internal_s_write_out_rv$port1__read =
	     axi_to_dmi_internal_s_write_out_rv$EN_port0__write ?
	       15'd10922 :
	       axi_to_dmi_internal_s_write_out_rv ;
  assign axi_to_dmi_internal_s_write_out_rv$EN_port1__write =
	     WILL_FIRE_RL_axi_to_dmi_send_axi_rsp && axi_to_dmi_access_type ||
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     axi_to_dmi_strb != 4'hF &&
	     axi_to_dmi_write_counter != 5'd3 ;
  assign axi_to_dmi_internal_s_write_out_rv$port1__write_1 =
	     MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__SEL_1 ?
	       MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__VAL_1 :
	       MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__VAL_1 ;
  assign axi_to_dmi_internal_s_write_out_rv$port2__read =
	     axi_to_dmi_internal_s_write_out_rv$EN_port1__write ?
	       axi_to_dmi_internal_s_write_out_rv$port1__write_1 :
	       axi_to_dmi_internal_s_write_out_rv$port1__read ;

  // register axi_to_dmi_access_type
  assign axi_to_dmi_access_type$D_IN =
	     MUX_axi_to_dmi_access_type$write_1__SEL_1 ;
  assign axi_to_dmi_access_type$EN =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     (axi_to_dmi_strb == 4'hF || axi_to_dmi_write_counter == 5'd3) ||
	     WILL_FIRE_RL_axi_to_dmi_receive_read_req ;

  // register axi_to_dmi_address
  assign axi_to_dmi_address$D_IN =
	     axi_to_dmi_internal_s_write_in_addr_rv[60:29] ;
  assign axi_to_dmi_address$EN = MUX_axi_to_dmi_received_addr$write_1__SEL_2 ;

  // register axi_to_dmi_address_pcie
  assign axi_to_dmi_address_pcie$D_IN = axi_to_dmi_address ;
  assign axi_to_dmi_address_pcie$EN =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     axi_to_dmi_strb != 4'hF &&
	     axi_to_dmi_write_counter == 5'd0 ;

  // register axi_to_dmi_data
  assign axi_to_dmi_data$D_IN = axi_to_dmi_internal_s_write_in_data_rv[36:5] ;
  assign axi_to_dmi_data$EN = MUX_axi_to_dmi_received_data$write_1__SEL_2 ;

  // register axi_to_dmi_data_pcie
  assign axi_to_dmi_data_pcie$D_IN =
	     (axi_to_dmi_write_counter == 5'd0) ?
	       axi_to_dmi_data :
	       x_dmi_data__h5498 ;
  assign axi_to_dmi_data_pcie$EN =
	     MUX_axi_to_dmi_internal_s_write_out_rv$port1__write_1__SEL_2 ;

  // register axi_to_dmi_dmi_handler_dmi_busy
  assign axi_to_dmi_dmi_handler_dmi_busy$D_IN =
	     MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1 ;
  assign axi_to_dmi_dmi_handler_dmi_busy$EN =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] == 7'd12 ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_response ;

  // register axi_to_dmi_dmi_handler_internal_req_access
  assign axi_to_dmi_dmi_handler_internal_req_access$D_IN =
	     MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1 ;
  assign axi_to_dmi_dmi_handler_internal_req_access$EN =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] == 7'd12 ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_response ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_latency ;

  // register axi_to_dmi_dmi_handler_internal_req_address
  assign axi_to_dmi_dmi_handler_internal_req_address$D_IN =
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[7:1] ;
  assign axi_to_dmi_dmi_handler_internal_req_address$EN =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] == 7'd16 ;

  // register axi_to_dmi_dmi_handler_internal_req_data
  assign axi_to_dmi_dmi_handler_internal_req_data$D_IN =
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[32:1] ;
  assign axi_to_dmi_dmi_handler_internal_req_data$EN =
	     MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1 ;

  // register axi_to_dmi_dmi_handler_internal_req_op
  assign axi_to_dmi_dmi_handler_internal_req_op$D_IN =
	     MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1 ?
	       MUX_axi_to_dmi_dmi_handler_internal_req_op$write_1__VAL_1 :
	       2'b0 ;
  assign axi_to_dmi_dmi_handler_internal_req_op$EN =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] == 7'd12 ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_response ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_latency ;

  // register axi_to_dmi_dmi_handler_internal_rsp_data
  assign axi_to_dmi_dmi_handler_internal_rsp_data$D_IN = RSP_DATA ;
  assign axi_to_dmi_dmi_handler_internal_rsp_data$EN = RSP_VALID ;

  // register axi_to_dmi_dmi_handler_internal_rsp_op
  assign axi_to_dmi_dmi_handler_internal_rsp_op$D_IN = RSP_OP ;
  assign axi_to_dmi_dmi_handler_internal_rsp_op$EN = RSP_VALID ;

  // register axi_to_dmi_dmi_handler_latency
  assign axi_to_dmi_dmi_handler_latency$D_IN =
	     MUX_axi_to_dmi_dmi_handler_dmi_busy$write_1__SEL_1 ?
	       4'd2 :
	       MUX_axi_to_dmi_dmi_handler_latency$write_1__VAL_2 ;
  assign axi_to_dmi_dmi_handler_latency$EN =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] == 7'd12 ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_latency ;

  // register axi_to_dmi_internal_s_read_in_rv
  assign axi_to_dmi_internal_s_read_in_rv$D_IN =
	     axi_to_dmi_internal_s_read_in_rv$port2__read ;
  assign axi_to_dmi_internal_s_read_in_rv$EN = 1'b1 ;

  // register axi_to_dmi_internal_s_read_isRst_isInReset
  assign axi_to_dmi_internal_s_read_isRst_isInReset$D_IN = 1'd0 ;
  assign axi_to_dmi_internal_s_read_isRst_isInReset$EN =
	     axi_to_dmi_internal_s_read_isRst_isInReset ;

  // register axi_to_dmi_internal_s_read_out_rv
  assign axi_to_dmi_internal_s_read_out_rv$D_IN =
	     axi_to_dmi_internal_s_read_out_rv$port2__read ;
  assign axi_to_dmi_internal_s_read_out_rv$EN = 1'b1 ;

  // register axi_to_dmi_internal_s_write_in_addr_rv
  assign axi_to_dmi_internal_s_write_in_addr_rv$D_IN =
	     axi_to_dmi_internal_s_write_in_addr_rv$port2__read ;
  assign axi_to_dmi_internal_s_write_in_addr_rv$EN = 1'b1 ;

  // register axi_to_dmi_internal_s_write_in_data_rv
  assign axi_to_dmi_internal_s_write_in_data_rv$D_IN =
	     axi_to_dmi_internal_s_write_in_data_rv$port2__read ;
  assign axi_to_dmi_internal_s_write_in_data_rv$EN = 1'b1 ;

  // register axi_to_dmi_internal_s_write_isRst_isInReset
  assign axi_to_dmi_internal_s_write_isRst_isInReset$D_IN = 1'd0 ;
  assign axi_to_dmi_internal_s_write_isRst_isInReset$EN =
	     axi_to_dmi_internal_s_write_isRst_isInReset ;

  // register axi_to_dmi_internal_s_write_out_rv
  assign axi_to_dmi_internal_s_write_out_rv$D_IN =
	     axi_to_dmi_internal_s_write_out_rv$port2__read ;
  assign axi_to_dmi_internal_s_write_out_rv$EN = 1'b1 ;

  // register axi_to_dmi_read_id
  assign axi_to_dmi_read_id$D_IN = axi_to_dmi_internal_s_read_in_rv[72:61] ;
  assign axi_to_dmi_read_id$EN = WILL_FIRE_RL_axi_to_dmi_receive_read_req ;

  // register axi_to_dmi_received_addr
  assign axi_to_dmi_received_addr$D_IN =
	     !WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request ;
  assign axi_to_dmi_received_addr$EN =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request ||
	     axi_to_dmi_internal_s_write_in_addr_rv[73] &&
	     !axi_to_dmi_received_addr ;

  // register axi_to_dmi_received_data
  assign axi_to_dmi_received_data$D_IN =
	     !WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request ;
  assign axi_to_dmi_received_data$EN =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request ||
	     axi_to_dmi_internal_s_write_in_data_rv[37] &&
	     !axi_to_dmi_received_data ;

  // register axi_to_dmi_strb
  assign axi_to_dmi_strb$D_IN = axi_to_dmi_internal_s_write_in_data_rv[4:1] ;
  assign axi_to_dmi_strb$EN = MUX_axi_to_dmi_received_data$write_1__SEL_2 ;

  // register axi_to_dmi_write_counter
  always@(axi_to_dmi_write_counter or x__h5723)
  begin
    case (axi_to_dmi_write_counter)
      5'd0: axi_to_dmi_write_counter$D_IN = x__h5723;
      5'd3: axi_to_dmi_write_counter$D_IN = 5'd0;
      default: axi_to_dmi_write_counter$D_IN = x__h5723;
    endcase
  end
  assign axi_to_dmi_write_counter$EN =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     axi_to_dmi_strb != 4'hF ;

  // register axi_to_dmi_write_id
  assign axi_to_dmi_write_id$D_IN =
	     axi_to_dmi_internal_s_write_in_addr_rv[72:61] ;
  assign axi_to_dmi_write_id$EN =
	     MUX_axi_to_dmi_received_addr$write_1__SEL_2 ;

  // submodule axi_to_dmi_dmi_handler_dmi_request
  assign axi_to_dmi_dmi_handler_dmi_request$D_IN =
	     MUX_axi_to_dmi_access_type$write_1__SEL_1 ?
	       MUX_axi_to_dmi_dmi_handler_dmi_request$enq_1__VAL_1 :
	       MUX_axi_to_dmi_dmi_handler_dmi_request$enq_1__VAL_2 ;
  assign axi_to_dmi_dmi_handler_dmi_request$ENQ =
	     WILL_FIRE_RL_axi_to_dmi_send_dmi_write_request &&
	     (axi_to_dmi_strb == 4'hF || axi_to_dmi_write_counter == 5'd3) ||
	     WILL_FIRE_RL_axi_to_dmi_receive_read_req ;
  assign axi_to_dmi_dmi_handler_dmi_request$DEQ =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request ;
  assign axi_to_dmi_dmi_handler_dmi_request$CLR = 1'b0 ;

  // submodule axi_to_dmi_dmi_handler_dmi_response
  assign axi_to_dmi_dmi_handler_dmi_response$D_IN =
	     MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__SEL_1 ?
	       MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_1 :
	       MUX_axi_to_dmi_dmi_handler_dmi_response$enq_1__VAL_2 ;
  assign axi_to_dmi_dmi_handler_dmi_response$ENQ =
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_request &&
	     axi_to_dmi_dmi_handler_dmi_request$D_OUT[39:33] != 7'd12 ||
	     WILL_FIRE_RL_axi_to_dmi_dmi_handler_handle_response ;
  assign axi_to_dmi_dmi_handler_dmi_response$DEQ =
	     WILL_FIRE_RL_axi_to_dmi_send_axi_rsp ;
  assign axi_to_dmi_dmi_handler_dmi_response$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_s_AXI_Dmi_arcache_EQ_0_82_OR_s_AXI_Dmi_arca_ETC___d197 =
	     { CASE_s_AXI_Dmi_arcache_0_s_AXI_Dmi_arcache_1_s_ETC__q1,
	       s_AXI_Dmi_arprot,
	       s_AXI_Dmi_arqos,
	       s_AXI_Dmi_arregion } ;
  assign IF_s_AXI_Dmi_awcache_EQ_0_10_OR_s_AXI_Dmi_awca_ETC___d225 =
	     { CASE_s_AXI_Dmi_awcache_0_s_AXI_Dmi_awcache_1_s_ETC__q2,
	       s_AXI_Dmi_awprot,
	       s_AXI_Dmi_awqos,
	       s_AXI_Dmi_awregion } ;
  assign x__h5723 = axi_to_dmi_write_counter + 5'd1 ;
  assign x_dmi_data__h5498 = axi_to_dmi_data_pcie | axi_to_dmi_data ;
  always@(s_AXI_Dmi_arcache)
  begin
    case (s_AXI_Dmi_arcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_s_AXI_Dmi_arcache_0_s_AXI_Dmi_arcache_1_s_ETC__q1 =
	      s_AXI_Dmi_arcache;
      default: CASE_s_AXI_Dmi_arcache_0_s_AXI_Dmi_arcache_1_s_ETC__q1 = 4'd11;
    endcase
  end
  always@(s_AXI_Dmi_awcache)
  begin
    case (s_AXI_Dmi_awcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_s_AXI_Dmi_awcache_0_s_AXI_Dmi_awcache_1_s_ETC__q2 =
	      s_AXI_Dmi_awcache;
      default: CASE_s_AXI_Dmi_awcache_0_s_AXI_Dmi_awcache_1_s_ETC__q2 = 4'd15;
    endcase
  end
  always@(axi_to_dmi_internal_s_read_arinpkg$wget)
  begin
    case (axi_to_dmi_internal_s_read_arinpkg$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_axi_to_dmi_internal_s_read_arinpkgwget_B_ETC__q3 =
	      axi_to_dmi_internal_s_read_arinpkg$wget[14:11];
      default: CASE_axi_to_dmi_internal_s_read_arinpkgwget_B_ETC__q3 = 4'd11;
    endcase
  end
  always@(axi_to_dmi_internal_s_write_arinpkg_addr$wget)
  begin
    case (axi_to_dmi_internal_s_write_arinpkg_addr$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_axi_to_dmi_internal_s_write_arinpkg_addr_ETC__q4 =
	      axi_to_dmi_internal_s_write_arinpkg_addr$wget[14:11];
      default: CASE_axi_to_dmi_internal_s_write_arinpkg_addr_ETC__q4 = 4'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge ACLK)
  begin
    if (ARESETN == `BSV_RESET_VALUE)
      begin
        axi_to_dmi_access_type <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi_to_dmi_address <= `BSV_ASSIGNMENT_DELAY 32'd0;
	axi_to_dmi_address_pcie <= `BSV_ASSIGNMENT_DELAY 32'd0;
	axi_to_dmi_data <= `BSV_ASSIGNMENT_DELAY 32'd0;
	axi_to_dmi_data_pcie <= `BSV_ASSIGNMENT_DELAY 32'd0;
	axi_to_dmi_dmi_handler_dmi_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi_to_dmi_dmi_handler_internal_req_access <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	axi_to_dmi_dmi_handler_internal_req_address <= `BSV_ASSIGNMENT_DELAY
	    7'd0;
	axi_to_dmi_dmi_handler_internal_req_data <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	axi_to_dmi_dmi_handler_internal_req_op <= `BSV_ASSIGNMENT_DELAY 2'd0;
	axi_to_dmi_dmi_handler_internal_rsp_data <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	axi_to_dmi_dmi_handler_internal_rsp_op <= `BSV_ASSIGNMENT_DELAY 2'd0;
	axi_to_dmi_dmi_handler_latency <= `BSV_ASSIGNMENT_DELAY 4'd0;
	axi_to_dmi_internal_s_read_in_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	axi_to_dmi_internal_s_read_out_rv <= `BSV_ASSIGNMENT_DELAY
	    48'h2AAAAAAAAAAA;
	axi_to_dmi_internal_s_write_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	axi_to_dmi_internal_s_write_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	    38'h0AAAAAAAAA;
	axi_to_dmi_internal_s_write_out_rv <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	axi_to_dmi_read_id <= `BSV_ASSIGNMENT_DELAY 12'd0;
	axi_to_dmi_received_addr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi_to_dmi_received_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi_to_dmi_strb <= `BSV_ASSIGNMENT_DELAY 4'd0;
	axi_to_dmi_write_counter <= `BSV_ASSIGNMENT_DELAY 5'd0;
	axi_to_dmi_write_id <= `BSV_ASSIGNMENT_DELAY 12'd0;
      end
    else
      begin
        if (axi_to_dmi_access_type$EN)
	  axi_to_dmi_access_type <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_access_type$D_IN;
	if (axi_to_dmi_address$EN)
	  axi_to_dmi_address <= `BSV_ASSIGNMENT_DELAY axi_to_dmi_address$D_IN;
	if (axi_to_dmi_address_pcie$EN)
	  axi_to_dmi_address_pcie <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_address_pcie$D_IN;
	if (axi_to_dmi_data$EN)
	  axi_to_dmi_data <= `BSV_ASSIGNMENT_DELAY axi_to_dmi_data$D_IN;
	if (axi_to_dmi_data_pcie$EN)
	  axi_to_dmi_data_pcie <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_data_pcie$D_IN;
	if (axi_to_dmi_dmi_handler_dmi_busy$EN)
	  axi_to_dmi_dmi_handler_dmi_busy <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_dmi_busy$D_IN;
	if (axi_to_dmi_dmi_handler_internal_req_access$EN)
	  axi_to_dmi_dmi_handler_internal_req_access <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_internal_req_access$D_IN;
	if (axi_to_dmi_dmi_handler_internal_req_address$EN)
	  axi_to_dmi_dmi_handler_internal_req_address <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_internal_req_address$D_IN;
	if (axi_to_dmi_dmi_handler_internal_req_data$EN)
	  axi_to_dmi_dmi_handler_internal_req_data <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_internal_req_data$D_IN;
	if (axi_to_dmi_dmi_handler_internal_req_op$EN)
	  axi_to_dmi_dmi_handler_internal_req_op <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_internal_req_op$D_IN;
	if (axi_to_dmi_dmi_handler_internal_rsp_data$EN)
	  axi_to_dmi_dmi_handler_internal_rsp_data <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_internal_rsp_data$D_IN;
	if (axi_to_dmi_dmi_handler_internal_rsp_op$EN)
	  axi_to_dmi_dmi_handler_internal_rsp_op <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_internal_rsp_op$D_IN;
	if (axi_to_dmi_dmi_handler_latency$EN)
	  axi_to_dmi_dmi_handler_latency <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_dmi_handler_latency$D_IN;
	if (axi_to_dmi_internal_s_read_in_rv$EN)
	  axi_to_dmi_internal_s_read_in_rv <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_internal_s_read_in_rv$D_IN;
	if (axi_to_dmi_internal_s_read_out_rv$EN)
	  axi_to_dmi_internal_s_read_out_rv <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_internal_s_read_out_rv$D_IN;
	if (axi_to_dmi_internal_s_write_in_addr_rv$EN)
	  axi_to_dmi_internal_s_write_in_addr_rv <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_internal_s_write_in_addr_rv$D_IN;
	if (axi_to_dmi_internal_s_write_in_data_rv$EN)
	  axi_to_dmi_internal_s_write_in_data_rv <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_internal_s_write_in_data_rv$D_IN;
	if (axi_to_dmi_internal_s_write_out_rv$EN)
	  axi_to_dmi_internal_s_write_out_rv <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_internal_s_write_out_rv$D_IN;
	if (axi_to_dmi_read_id$EN)
	  axi_to_dmi_read_id <= `BSV_ASSIGNMENT_DELAY axi_to_dmi_read_id$D_IN;
	if (axi_to_dmi_received_addr$EN)
	  axi_to_dmi_received_addr <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_received_addr$D_IN;
	if (axi_to_dmi_received_data$EN)
	  axi_to_dmi_received_data <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_received_data$D_IN;
	if (axi_to_dmi_strb$EN)
	  axi_to_dmi_strb <= `BSV_ASSIGNMENT_DELAY axi_to_dmi_strb$D_IN;
	if (axi_to_dmi_write_counter$EN)
	  axi_to_dmi_write_counter <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_write_counter$D_IN;
	if (axi_to_dmi_write_id$EN)
	  axi_to_dmi_write_id <= `BSV_ASSIGNMENT_DELAY
	      axi_to_dmi_write_id$D_IN;
      end
  end

  always@(posedge ACLK or `BSV_RESET_EDGE ARESETN)
  if (ARESETN == `BSV_RESET_VALUE)
    begin
      axi_to_dmi_internal_s_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
      axi_to_dmi_internal_s_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (axi_to_dmi_internal_s_read_isRst_isInReset$EN)
	axi_to_dmi_internal_s_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axi_to_dmi_internal_s_read_isRst_isInReset$D_IN;
      if (axi_to_dmi_internal_s_write_isRst_isInReset$EN)
	axi_to_dmi_internal_s_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    axi_to_dmi_internal_s_write_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axi_to_dmi_access_type = 1'h0;
    axi_to_dmi_address = 32'hAAAAAAAA;
    axi_to_dmi_address_pcie = 32'hAAAAAAAA;
    axi_to_dmi_data = 32'hAAAAAAAA;
    axi_to_dmi_data_pcie = 32'hAAAAAAAA;
    axi_to_dmi_dmi_handler_dmi_busy = 1'h0;
    axi_to_dmi_dmi_handler_internal_req_access = 1'h0;
    axi_to_dmi_dmi_handler_internal_req_address = 7'h2A;
    axi_to_dmi_dmi_handler_internal_req_data = 32'hAAAAAAAA;
    axi_to_dmi_dmi_handler_internal_req_op = 2'h2;
    axi_to_dmi_dmi_handler_internal_rsp_data = 32'hAAAAAAAA;
    axi_to_dmi_dmi_handler_internal_rsp_op = 2'h2;
    axi_to_dmi_dmi_handler_latency = 4'hA;
    axi_to_dmi_internal_s_read_in_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi_to_dmi_internal_s_read_isRst_isInReset = 1'h0;
    axi_to_dmi_internal_s_read_out_rv = 48'hAAAAAAAAAAAA;
    axi_to_dmi_internal_s_write_in_addr_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    axi_to_dmi_internal_s_write_in_data_rv = 38'h2AAAAAAAAA;
    axi_to_dmi_internal_s_write_isRst_isInReset = 1'h0;
    axi_to_dmi_internal_s_write_out_rv = 15'h2AAA;
    axi_to_dmi_read_id = 12'hAAA;
    axi_to_dmi_received_addr = 1'h0;
    axi_to_dmi_received_data = 1'h0;
    axi_to_dmi_strb = 4'hA;
    axi_to_dmi_write_counter = 5'h0A;
    axi_to_dmi_write_id = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAXI_to_Dmi

